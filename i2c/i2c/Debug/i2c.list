
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003f4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080003f8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003f8  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fc7  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000558  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00003550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013f  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c91  00000000  00000000  00003857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002170  00000000  00000000  000194e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e8da  00000000  00000000  0001b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000054c  00000000  00000000  00099f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0009a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003d4 	.word	0x080003d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003d4 	.word	0x080003d4

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <I2C1_Init>:
#include <stdio.h>

volatile uint8_t i2c_data; // Variable to store data

void I2C1_Init(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
    // Enable clock for I2C1 and GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000188:	4b35      	ldr	r3, [pc, #212]	@ (8000260 <I2C1_Init+0xdc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a34      	ldr	r2, [pc, #208]	@ (8000260 <I2C1_Init+0xdc>)
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000194:	4b32      	ldr	r3, [pc, #200]	@ (8000260 <I2C1_Init+0xdc>)
 8000196:	69db      	ldr	r3, [r3, #28]
 8000198:	4a31      	ldr	r2, [pc, #196]	@ (8000260 <I2C1_Init+0xdc>)
 800019a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800019e:	61d3      	str	r3, [r2, #28]

    // Configure PB6 and PB7 as alternate function open-drain
    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_MODE7);
 80001a0:	4b30      	ldr	r3, [pc, #192]	@ (8000264 <I2C1_Init+0xe0>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000264 <I2C1_Init+0xe0>)
 80001a6:	f023 534c 	bic.w	r3, r3, #855638016	@ 0x33000000
 80001aa:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6_0 | GPIO_CRL_MODE7_0);
 80001ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000264 <I2C1_Init+0xe0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000264 <I2C1_Init+0xe0>)
 80001b2:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 80001b6:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 80001b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000264 <I2C1_Init+0xe0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a29      	ldr	r2, [pc, #164]	@ (8000264 <I2C1_Init+0xe0>)
 80001be:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 80001c2:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_CNF6_1 | GPIO_CRL_CNF7_1);
 80001c4:	4b27      	ldr	r3, [pc, #156]	@ (8000264 <I2C1_Init+0xe0>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a26      	ldr	r2, [pc, #152]	@ (8000264 <I2C1_Init+0xe0>)
 80001ca:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 80001ce:	6013      	str	r3, [r2, #0]

    // Configure I2C1
    I2C1->CR1 &= ~I2C_CR1_PE; // Disable I2C peripheral
 80001d0:	4b25      	ldr	r3, [pc, #148]	@ (8000268 <I2C1_Init+0xe4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a24      	ldr	r2, [pc, #144]	@ (8000268 <I2C1_Init+0xe4>)
 80001d6:	f023 0301 	bic.w	r3, r3, #1
 80001da:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SMBUS; // Disable SMBus mode
 80001dc:	4b22      	ldr	r3, [pc, #136]	@ (8000268 <I2C1_Init+0xe4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a21      	ldr	r2, [pc, #132]	@ (8000268 <I2C1_Init+0xe4>)
 80001e2:	f023 0302 	bic.w	r3, r3, #2
 80001e6:	6013      	str	r3, [r2, #0]

    I2C1->CR2 |= 36; // Set peripheral clock frequency to 36 MHz
 80001e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000268 <I2C1_Init+0xe4>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000268 <I2C1_Init+0xe4>)
 80001ee:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 80001f2:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= 180; // Set clock control to 180
 80001f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000268 <I2C1_Init+0xe4>)
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000268 <I2C1_Init+0xe4>)
 80001fa:	f043 03b4 	orr.w	r3, r3, #180	@ 0xb4
 80001fe:	61d3      	str	r3, [r2, #28]
    I2C1->TRISE |= 37; // Set maximum rise time to 37
 8000200:	4b19      	ldr	r3, [pc, #100]	@ (8000268 <I2C1_Init+0xe4>)
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	4a18      	ldr	r2, [pc, #96]	@ (8000268 <I2C1_Init+0xe4>)
 8000206:	f043 0325 	orr.w	r3, r3, #37	@ 0x25
 800020a:	6213      	str	r3, [r2, #32]
    I2C1->OAR1 &= ~((uint16_t)(1<<15));
 800020c:	4b16      	ldr	r3, [pc, #88]	@ (8000268 <I2C1_Init+0xe4>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	4a15      	ldr	r2, [pc, #84]	@ (8000268 <I2C1_Init+0xe4>)
 8000212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000216:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= 0x50; //7-bit address to 0x28
 8000218:	4b13      	ldr	r3, [pc, #76]	@ (8000268 <I2C1_Init+0xe4>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a12      	ldr	r2, [pc, #72]	@ (8000268 <I2C1_Init+0xe4>)
 800021e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000222:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000224:	201f      	movs	r0, #31
 8000226:	f7ff ff91 	bl	800014c <__NVIC_EnableIRQ>
    I2C1->CR2 |= I2C_CR2_ITEVTEN;
 800022a:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <I2C1_Init+0xe4>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <I2C1_Init+0xe4>)
 8000230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000234:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_ITBUFEN;
 8000236:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <I2C1_Init+0xe4>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a0b      	ldr	r2, [pc, #44]	@ (8000268 <I2C1_Init+0xe4>)
 800023c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000240:	6053      	str	r3, [r2, #4]

    I2C1->CR1 |= I2C_CR1_PE;
 8000242:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <I2C1_Init+0xe4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a08      	ldr	r2, [pc, #32]	@ (8000268 <I2C1_Init+0xe4>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_ACK; // Enable I2C1 and ACK
 800024e:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <I2C1_Init+0xe4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a05      	ldr	r2, [pc, #20]	@ (8000268 <I2C1_Init+0xe4>)
 8000254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000258:	6013      	str	r3, [r2, #0]
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000
 8000264:	40010c00 	.word	0x40010c00
 8000268:	40005400 	.word	0x40005400

0800026c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    // Check if address matched (slave mode)
    if (I2C1->SR1 & I2C_SR1_ADDR)
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <I2C1_EV_IRQHandler+0x38>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	f003 0302 	and.w	r3, r3, #2
 8000278:	2b00      	cmp	r3, #0
 800027a:	d003      	beq.n	8000284 <I2C1_EV_IRQHandler+0x18>
    {
        // Clear ADDR flag by reading SR1 and SR2
        (void)I2C1->SR1;
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <I2C1_EV_IRQHandler+0x38>)
 800027e:	695b      	ldr	r3, [r3, #20]
        (void)I2C1->SR2;
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <I2C1_EV_IRQHandler+0x38>)
 8000282:	699b      	ldr	r3, [r3, #24]
    }

    // Check if data received
    if (I2C1->SR1 & I2C_SR1_RXNE)
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <I2C1_EV_IRQHandler+0x38>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800028c:	2b00      	cmp	r3, #0
 800028e:	d004      	beq.n	800029a <I2C1_EV_IRQHandler+0x2e>
    {
        // Read received byte
        i2c_data = I2C1->DR;
 8000290:	4b04      	ldr	r3, [pc, #16]	@ (80002a4 <I2C1_EV_IRQHandler+0x38>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <I2C1_EV_IRQHandler+0x3c>)
 8000298:	701a      	strb	r2, [r3, #0]
    }
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400
 80002a8:	20000020 	.word	0x20000020

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    I2C1_Init();
 80002b0:	f7ff ff68 	bl	8000184 <I2C1_Init>
    while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <main+0x8>

080002b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <NMI_Handler+0x4>

080002c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <HardFault_Handler+0x4>

080002c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <MemManage_Handler+0x4>

080002d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <BusFault_Handler+0x4>

080002d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <UsageFault_Handler+0x4>

080002e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000308:	f000 f82e 	bl	8000368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}

08000310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800031c:	f7ff fff8 	bl	8000310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480b      	ldr	r0, [pc, #44]	@ (8000350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000322:	490c      	ldr	r1, [pc, #48]	@ (8000354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000324:	4a0c      	ldr	r2, [pc, #48]	@ (8000358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a09      	ldr	r2, [pc, #36]	@ (800035c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000338:	4c09      	ldr	r4, [pc, #36]	@ (8000360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000346:	f000 f821 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffaf 	bl	80002ac <main>
  bx lr
 800034e:	4770      	bx	lr
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000358:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 800035c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000360:	20000028 	.word	0x20000028

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <HAL_IncTick+0x1c>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <HAL_IncTick+0x20>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4413      	add	r3, r2
 8000378:	4a03      	ldr	r2, [pc, #12]	@ (8000388 <HAL_IncTick+0x20>)
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000000 	.word	0x20000000
 8000388:	20000024 	.word	0x20000024

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2600      	movs	r6, #0
 8000390:	4d0c      	ldr	r5, [pc, #48]	@ (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	@ (80003c8 <__libc_init_array+0x3c>)
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	f000 f81a 	bl	80003d4 <_init>
 80003a0:	2600      	movs	r6, #0
 80003a2:	4d0a      	ldr	r5, [pc, #40]	@ (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	@ (80003d0 <__libc_init_array+0x44>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
