
i2c401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a0  080004a0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a0  080004a0  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004a0  080004a0  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a0  080004a0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a0  080004a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004a4  080004a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004a8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004ac  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004ac  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001328  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000050d  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000146  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b18  00000000  00000000  00003b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021de  00000000  00000000  0001769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007df47  00000000  00000000  0001987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000977c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  00097808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00097d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000488 	.word	0x08000488

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000488 	.word	0x08000488

080001d4 <I2C1_Init>:
#include "stm32f4xx.h"

void I2C1_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    // Enable clock for I2C1 and GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001d8:	4b26      	ldr	r3, [pc, #152]	@ (8000274 <I2C1_Init+0xa0>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a25      	ldr	r2, [pc, #148]	@ (8000274 <I2C1_Init+0xa0>)
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80001e4:	4b23      	ldr	r3, [pc, #140]	@ (8000274 <I2C1_Init+0xa0>)
 80001e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001e8:	4a22      	ldr	r2, [pc, #136]	@ (8000274 <I2C1_Init+0xa0>)
 80001ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ee:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure PB6 and PB7 as alternate function open-drain
    GPIOB->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 80001f0:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <I2C1_Init+0xa4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a20      	ldr	r2, [pc, #128]	@ (8000278 <I2C1_Init+0xa4>)
 80001f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1);
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <I2C1_Init+0xa4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <I2C1_Init+0xa4>)
 8000202:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000206:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7);
 8000208:	4b1b      	ldr	r3, [pc, #108]	@ (8000278 <I2C1_Init+0xa4>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a1a      	ldr	r2, [pc, #104]	@ (8000278 <I2C1_Init+0xa4>)
 800020e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000212:	6053      	str	r3, [r2, #4]
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4)); // AF4 for I2C1
 8000214:	4b18      	ldr	r3, [pc, #96]	@ (8000278 <I2C1_Init+0xa4>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a17      	ldr	r2, [pc, #92]	@ (8000278 <I2C1_Init+0xa4>)
 800021a:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 800021e:	6213      	str	r3, [r2, #32]

    // Configure I2C1
    I2C1->CR1 &= ~I2C_CR1_PE; // Disable I2C peripheral
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <I2C1_Init+0xa8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a15      	ldr	r2, [pc, #84]	@ (800027c <I2C1_Init+0xa8>)
 8000226:	f023 0301 	bic.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
    I2C1->CR2 &= ~I2C_CR2_FREQ;
 800022c:	4b13      	ldr	r3, [pc, #76]	@ (800027c <I2C1_Init+0xa8>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a12      	ldr	r2, [pc, #72]	@ (800027c <I2C1_Init+0xa8>)
 8000232:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000236:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= 36;
 8000238:	4b10      	ldr	r3, [pc, #64]	@ (800027c <I2C1_Init+0xa8>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <I2C1_Init+0xa8>)
 800023e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8000242:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= 180;
 8000244:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <I2C1_Init+0xa8>)
 8000246:	69db      	ldr	r3, [r3, #28]
 8000248:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <I2C1_Init+0xa8>)
 800024a:	f043 03b4 	orr.w	r3, r3, #180	@ 0xb4
 800024e:	61d3      	str	r3, [r2, #28]
    I2C1->TRISE |= 37;
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <I2C1_Init+0xa8>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a09      	ldr	r2, [pc, #36]	@ (800027c <I2C1_Init+0xa8>)
 8000256:	f043 0325 	orr.w	r3, r3, #37	@ 0x25
 800025a:	6213      	str	r3, [r2, #32]
    I2C1->CR1 |= I2C_CR1_PE; // Enable I2C1
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <I2C1_Init+0xa8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a06      	ldr	r2, [pc, #24]	@ (800027c <I2C1_Init+0xa8>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020400 	.word	0x40020400
 800027c:	40005400 	.word	0x40005400

08000280 <I2C1_SendData>:

void I2C1_SendData(uint8_t slave_addr, uint8_t data)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
    // Wait until I2C1 is not busy anymore
    while (I2C1->SR2 & I2C_SR2_BUSY);
 8000290:	bf00      	nop
 8000292:	4b24      	ldr	r3, [pc, #144]	@ (8000324 <I2C1_SendData+0xa4>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1f9      	bne.n	8000292 <I2C1_SendData+0x12>

    // Generate start condition
    I2C1->CR1 |= I2C_CR1_START;
 800029e:	4b21      	ldr	r3, [pc, #132]	@ (8000324 <I2C1_SendData+0xa4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a20      	ldr	r2, [pc, #128]	@ (8000324 <I2C1_SendData+0xa4>)
 80002a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a8:	6013      	str	r3, [r2, #0]

    // Wait for I2C1 EV5. It means that the start condition has been correctly released
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80002aa:	bf00      	nop
 80002ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000324 <I2C1_SendData+0xa4>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f9      	beq.n	80002ac <I2C1_SendData+0x2c>

    // Send slave address
    I2C1->DR |= slave_addr << 1;
 80002b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000324 <I2C1_SendData+0xa4>)
 80002ba:	691a      	ldr	r2, [r3, #16]
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	4918      	ldr	r1, [pc, #96]	@ (8000324 <I2C1_SendData+0xa4>)
 80002c2:	4313      	orrs	r3, r2
 80002c4:	610b      	str	r3, [r1, #16]

    // Wait for I2C1 EV6
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002c6:	bf00      	nop
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <I2C1_SendData+0xa4>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	f003 0302 	and.w	r3, r3, #2
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f9      	beq.n	80002c8 <I2C1_SendData+0x48>

    // Clear ADDR flag by reading SR1 and SR2
    (void)I2C1->SR1;
 80002d4:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <I2C1_SendData+0xa4>)
 80002d6:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <I2C1_SendData+0xa4>)
 80002da:	699b      	ldr	r3, [r3, #24]

    // Wait until TXE flag is set
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80002dc:	bf00      	nop
 80002de:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <I2C1_SendData+0xa4>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <I2C1_SendData+0x5e>

    // Write data to DR
    I2C1->DR = data;
 80002ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <I2C1_SendData+0xa4>)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	6113      	str	r3, [r2, #16]

    // Wait until TXE and BTF flags are set
    while (!(I2C1->SR1 & I2C_SR1_TXE) && !(I2C1->SR1 & I2C_SR1_BTF));
 80002f0:	bf00      	nop
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <I2C1_SendData+0xa4>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <I2C1_SendData+0x8a>
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <I2C1_SendData+0xa4>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f3      	beq.n	80002f2 <I2C1_SendData+0x72>

    // Generate stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <I2C1_SendData+0xa4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <I2C1_SendData+0xa4>)
 8000310:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000314:	6013      	str	r3, [r2, #0]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40005400 	.word	0x40005400

08000328 <main>:

int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
    uint8_t data = 0x01; // Data to send
 800032e:	2301      	movs	r3, #1
 8000330:	71fb      	strb	r3, [r7, #7]

    I2C1_Init();
 8000332:	f7ff ff4f 	bl	80001d4 <I2C1_Init>

    while (1)
    {
        I2C1_SendData(0x28, data); // Send 1 byte to slave with address 0x28
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4619      	mov	r1, r3
 800033a:	2028      	movs	r0, #40	@ 0x28
 800033c:	f7ff ffa0 	bl	8000280 <I2C1_SendData>
 8000340:	e7f9      	b.n	8000336 <main+0xe>

08000342 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000346:	bf00      	nop
 8000348:	e7fd      	b.n	8000346 <NMI_Handler+0x4>

0800034a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034e:	bf00      	nop
 8000350:	e7fd      	b.n	800034e <HardFault_Handler+0x4>

08000352 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000356:	bf00      	nop
 8000358:	e7fd      	b.n	8000356 <MemManage_Handler+0x4>

0800035a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800035e:	bf00      	nop
 8000360:	e7fd      	b.n	800035e <BusFault_Handler+0x4>

08000362 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000366:	bf00      	nop
 8000368:	e7fd      	b.n	8000366 <UsageFault_Handler+0x4>

0800036a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f83e 	bl	8000418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <SystemInit+0x20>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003aa:	4a05      	ldr	r2, [pc, #20]	@ (80003c0 <SystemInit+0x20>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003c8:	f7ff ffea 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	@ (8000400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	@ (8000404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80003f2:	f000 f825 	bl	8000440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f6:	f7ff ff97 	bl	8000328 <main>
  bx  lr    
 80003fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000408:	080004a8 	.word	0x080004a8
  ldr r2, =_sbss
 800040c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000410:	20000024 	.word	0x20000024

08000414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_IncTick+0x20>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_IncTick+0x24>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4413      	add	r3, r2
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <HAL_IncTick+0x24>)
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000020 	.word	0x20000020

08000440 <__libc_init_array>:
 8000440:	b570      	push	{r4, r5, r6, lr}
 8000442:	4d0d      	ldr	r5, [pc, #52]	@ (8000478 <__libc_init_array+0x38>)
 8000444:	4c0d      	ldr	r4, [pc, #52]	@ (800047c <__libc_init_array+0x3c>)
 8000446:	1b64      	subs	r4, r4, r5
 8000448:	10a4      	asrs	r4, r4, #2
 800044a:	2600      	movs	r6, #0
 800044c:	42a6      	cmp	r6, r4
 800044e:	d109      	bne.n	8000464 <__libc_init_array+0x24>
 8000450:	4d0b      	ldr	r5, [pc, #44]	@ (8000480 <__libc_init_array+0x40>)
 8000452:	4c0c      	ldr	r4, [pc, #48]	@ (8000484 <__libc_init_array+0x44>)
 8000454:	f000 f818 	bl	8000488 <_init>
 8000458:	1b64      	subs	r4, r4, r5
 800045a:	10a4      	asrs	r4, r4, #2
 800045c:	2600      	movs	r6, #0
 800045e:	42a6      	cmp	r6, r4
 8000460:	d105      	bne.n	800046e <__libc_init_array+0x2e>
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	f855 3b04 	ldr.w	r3, [r5], #4
 8000468:	4798      	blx	r3
 800046a:	3601      	adds	r6, #1
 800046c:	e7ee      	b.n	800044c <__libc_init_array+0xc>
 800046e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000472:	4798      	blx	r3
 8000474:	3601      	adds	r6, #1
 8000476:	e7f2      	b.n	800045e <__libc_init_array+0x1e>
 8000478:	080004a0 	.word	0x080004a0
 800047c:	080004a0 	.word	0x080004a0
 8000480:	080004a0 	.word	0x080004a0
 8000484:	080004a4 	.word	0x080004a4

08000488 <_init>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr

08000494 <_fini>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr
